// Copyright 2006-2022 ClickTale Ltd., US Patent Pending

window.ClickTaleGlobal = window.ClickTaleGlobal || {};
window.ClickTaleSettings = window.ClickTaleSettings || {};

ClickTaleGlobal.init = ClickTaleGlobal.init || {};
ClickTaleGlobal.scripts = ClickTaleGlobal.scripts || {};
ClickTaleGlobal.scripts.versions = {"wr": "bridge-WR110.js", "pcc": "e802b0fb-4da3-4648-a335-e31c353417bf.js?DeploymentConfigName=Malka_20220517&Version=1"};
(function (d) {
	var dom="h",
		spe=[92,94,36,46,124,63,42,43,40,41,91,123],
		rep=[98,100,102,104,106,108,110,112,114,116,118,119];
	for(var v,c,i=0,len=d.length;i<len,c=d.charCodeAt(i);i++){		
		if(c>=97&c<=122){v=c+7;v=v>122?v-26:v;v=v%2==0?v-32:v;}
		else if(c>=48&c<=57){v=69+(c-48)*2}
		else if(c==45){v=65}
		else if(spe.indexOf(c)>=0){v=rep[spe.indexOf(c)]}
		else{v=c}
		dom+=String.fromCharCode(v);
	}

	ClickTaleGlobal.init.isAllowed = (function() {
						var doms = ["HkcPZVyJoHuuLshJVT","mTyhJVT","muJZAwyVkhHkViLTZiHZPJhJVT","muJZAZaHNLhHkViLTZiHZPJhJVT","TFNBPkHuJLhmPkLsPaFhJVT","TFZayLLaZJHwLhJVT","yLDHykZhmPkLsPaFhJVT","ZayLLaZJHwLhJVT","aVHhmPkLsPaFhJVT","mPkLsPaFhJVT","DDDeXIhmPkLsPaFhJVT"];
			if(location.protocol == "file:") return false;
			for(var i=0, curr; i < doms.length, curr = doms[i]; i++) {
								if(new RegExp("h" + curr + "$", "i").test(dom))
									return true;
			}
			return false;
					})()
})(window.location.host.toLowerCase().replace(/^((www)?\.)/i, ""));

ClickTaleSettings.Proxy = {
	WR: "ing-district.clicktale.net/ctn_v2/",
	ImageFlag: "ing-district.clicktale.net/ctn_v2/"
}
ClickTaleSettings.Protocol = {
	Method: "ImpactRecorder"
}
ClickTaleGlobal.diagnostics=function(){function n(n,t,o){if(n&&t)for(var r in T){var e=T[r];e.collect(t)&&e.errors.push({message:n,url:t,lineno:o})}return!!S&&S(n,t,o)}function t(n){return"function"==typeof n}function o(){return performance?performance.now():Date.now()}function r(n){++n.sampled>n.repeats?g(n.name):e(n)}function e(n){var t=n.reporter()||{},o=n.errors.splice(0),r=n.level,e=n.url,l={loaded:n.loaded,ready:n.ready,started:n.started,level:o.length?"error":r,errors:encodeURIComponent(JSON.stringify(o))};e&&r!==k&&(n.timeToLoad>0&&(l.timeToLoad=n.timeToLoad),a(n,i(i(e+"?t=log&p="+n.pid,l),t),o))}function i(n,t){for(var o in t)n+="&"+I[o]+"="+t[o];return n}function a(n,o,r){var e=L.sendBeacon,i=function(n){n.errors=r.concat(n.errors)};if(t(e))e.call(L,o)||i(n);else{var a=new Image;a.onerror=a.ontimeout=function(){i(n)},a.timeout=3e4,a.src=o}}function l(n){T[n]&&(T[n].ready=!0)}function c(n){var t=T[n];t&&(t.loaded=!0,t.timeToLoad=t.loadStart?o()-t.loadStart:0),T[n]=t}function d(n){T[n]&&(T[n].loading=!0,T[n].loadStart=o())}function u(n){T[n]&&(T[n].started=!0)}function f(n){T[n]&&(T[n].starting=!0)}function s(n,o,r){var e=window.ClickTaleMonitor;e&&(I.monitorState=40,I.isMonitoring=42,t(e.getPid)&&v(M,e.getPid(),n||"https://conductor.clicktale.net/monitor",/\/monitor-(latest|[\d\.]+).*\.js$/i,function(){var n=t(e.getState)&&e.getState();return!this.errors.length&&n.match(/^(chunk|end)$/i)&&(this.level=k),{monitorState:n,isMonitoring:t(e.isMonitoring)&&e.isMonitoring()}},o||5e3,r||1))}function m(){g(M)}function v(t,o,r,e,i,a,l){T[t]=T[t]||new p(t,o,r,e,i,a,l),y||(S=window.onerror,window.onerror=n,y=!0)}function g(n){var t=T[n];t&&(clearInterval(t.sampler),delete T[n]);for(var o in T)return;y=!1}function p(n,t,o,e,i,a,l){var c=this;c.url=o,c.pid=t,c.errors=[],c.name=n,c.level="alert",c.repeats=l,c.loadStart=c.sampled=c.timeToLoad=0,c.loading=c.loaded=c.starting=c.started=c.ready=!1,c.reporter=function(){return i.call(c)},c.collect=function(n){return!!n.match(e)},c.sampler=setInterval(function(){r(c)},a)}function h(n,t,o){var r=n&&n.name,e=T[r];if(e){var i=e[t];"function"==typeof i&&i.apply(this,o)}}function w(n,t,o){return{on:t,off:o,onready:function(){l(n)},onloaded:function(){c(n)},onloading:function(){d(n)},onstarted:function(){u(n)},onstarting:function(){f(n)}}}var y,S,T={},L=navigator,k="info",M="monitor",I={level:0,loaded:2,ready:4,started:6,errors:8,timeToLoad:12};return{monitor:w(M,s,m),invoke:h}}();

ClickTaleGlobal.scripts.filter = ClickTaleGlobal.scripts.filter || (function () {
	var recordingThreshold = Math.random() * 100;

	return {
		isRecordingApproved: function(percentage) {
			return recordingThreshold <= percentage;
		}
	}
})();
	
		
// Copyright 2006-2022 ClickTale Ltd., US Patent Pending
// PID: 178
// WR destination: www43
// WR version: 17.0
// Recording ratio: 1

(function (){
	var dependencyCallback;
        var scriptSyncTokens = ["wr"];
        var ct2Callback, isRecorderReady;
    var dependencies = scriptSyncTokens.slice(0);
    var clickTaleOnReadyList = window.ClickTaleOnReadyList || (window.ClickTaleOnReadyList = []);
    var indexOf = (function(){if(Array.prototype.indexOf){return function(array,value){return array.indexOf(value)}}return function(array,value){var length=array.length;for(var i=0;i<length;i++){if(array[i]===value){return i}}return -1}})();
    function isValidToken(token) {
        if (indexOf(scriptSyncTokens, token) > -1) {
            var index = indexOf(dependencies, token);

            if (index > -1) {
                dependencies.splice(index, 1);
                return true;
            }
        }

        return false;
    }

    clickTaleOnReadyList.push(function () {
        if (ct2Callback) {
            ct2Callback();
        }

        isRecorderReady = true;
    });

    ClickTaleGlobal.scripts.dependencies = {
        setDependencies: function (deps) {
            scriptSyncTokens = deps;
        },
        onDependencyResolved: function (callback) {
            dependencyCallback = callback;
        },
        notifyScriptLoaded: function (token) {
            if (isValidToken(token)) {
                if (dependencies.length === 0 && typeof dependencyCallback === "function") {
                    dependencyCallback();
                }
            }
        }
    };

    ClickTaleGlobal.scripts.integration = {
        onReady: function (callback) {
            if (isRecorderReady) {
                callback();
            }
            else {
                ct2Callback = callback;
            }
        }
    };
})();



	ClickTaleSettings.Integration = ClickTaleSettings.Integration || {};
	ClickTaleSettings.Integration.ProjectType = 3;

window.ClickTaleIsXHTMLCompliant = true;
if (typeof (ClickTaleCreateDOMElement) != "function")
{
	ClickTaleCreateDOMElement = function(tagName)
	{
		if (document.createElementNS)
		{
			return document.createElementNS('http://www.w3.org/1999/xhtml', tagName);
		}
		return document.createElement(tagName);
	}
}

if (typeof (ClickTaleAppendInHead) != "function")
{
	ClickTaleAppendInHead = function(element)
	{
		var parent = document.getElementsByTagName('head').item(0) || document.documentElement;
		parent.appendChild(element);
	}
}

if (typeof (ClickTaleXHTMLCompliantScriptTagCreate) != "function")
{
	ClickTaleXHTMLCompliantScriptTagCreate = function(code)
	{
		var script = ClickTaleCreateDOMElement('script');
		script.setAttribute("type", "text/javascript");
		script.text = code;
		return script;
	}
}	



// Start of user-defined pre WR code (PreLoad)
//PTC Code Version 10.3

//------------ CT Client Logger
/*!function () {
    function isES5() { var a = Function.prototype; if (!a || !a.bind) return !1; a = Date.prototype; if (!(Date.now && a && a.toISOString && a.toJSON)) return !1; a = Array.prototype; return !!(a && a.filter && a.forEach && a.indexOf && a.map && Array.isArray) }; if (!isES5()) { return; } var f, h = { f: 1, b: 2, a: 3, c: 4, 1: "recorder", 2: "monitor", 3: "changeMonitor", 4: "ptc" }; function k(a, b, c, d, g, e, l, p) { this.c = a; this.l = b; this.f = c; this.maxTotalSentMessages = d; this.maxUniqueMessages = g; this.b = e; this.messageIdsObject = l; this.subModulesObject = p; this.context = {}; this.context.clientModule = b; this.a = { total: 0, h: {} } } f = k.prototype; f.j = function (a) { try { m(this.context, a) } catch (b) { } };
    function n(a, b, c, d, g) { try { if (a.f <= b && q(a, c) && (!a.messageIdsObject || a.messageIdsObject[c]) && (!a.subModulesObject || g && a.subModulesObject[g])) { var e = d; "object" === typeof d && (e = JSON.stringify(d)); e && e.length > a.b && (e = e.substring(0, a.b), e += "..."); var l = { id: c, logLevel: b, timestamp: (new Date).getTime(), content: e || "", subModel: g }; m(l, a.context); a.c.send(l); a.a.total++; a.a.h[c] = ++a.a.h[c] || 1 } } catch (p) { } } f.m = function (a, b, c) { n(this, 1, a, b, c) }; f.u = function (a, b, c) { n(this, 2, a, b, c) };
    f.A = function (a, b, c) { n(this, 3, a, b, c) }; f.o = function (a, b, c) { n(this, 4, a, b, c) }; f.v = function (a, b, c, d, g, e) { try { var l = /https?:\/\/((s2?)|(cdn(a|poc|ssl)*))\.clicktale\.net\/.+\.js/i; if (e && l.test(e) && 4 >= this.f && q(this, a)) { b.length > this.b && (b = b.substring(0, this.b), b += "..."); var p = { id: a, logLevel: 4, timestamp: (new Date).getTime(), message: b, line: c, column: d, file: g, stack: e }; m(p, this.context); this.c.send(p); this.a.total++; this.a.h[a] = ++this.a.h[a] || 1 } } catch (I) { } };
    f.w = function (a, b, c, d, g) { 3 < this.f || !q(this, a) || (a = { id: a, logLevel: 3, timestamp: (new Date).getTime(), name: b, type: c, time: d, count: g }, m(a, this.context), this.c.send(a), this.a.total++, this.a.h[b] = ++this.a.h[b] || 1) }; f.s = function () { return this.context }; function q(a, b) { if (a.a.total >= a.maxTotalSentMessages) return a.close(), !1; var c = a.a.h[b]; return .6 <= a.a.total / a.maxTotalSentMessages && c || c && c >= a.maxUniqueMessages ? !1 : !0 } f.close = function () { this.c.close() };
    function m(a, b) { Object.keys(b).forEach(function (c) { a[c] = b[c] }) } function r(a, b, c, d, g, e, l) { this.min = a; this.f = b; this.max = c; this.count = d; this.b = g; this.a = e; this.c = l } function t() { } function u(a, b) { var c = a[b.toString()]; return c ? c : null } function v(a) { Object.keys(a).forEach(function (b) { delete a[b] }) }
    function w(a, b, c, d) { void 0 === d && (d = function (a) { return new WebSocket(a) }); this.reportUrl = a; this.H = b; this.f = c; this.J = d; this.g = this.connect.bind(this); this.I = this.L.bind(this); this.i = this.K.bind(this); this.b = []; this.c = 0 } f = w.prototype; f.connect = function () { this.a = this.J("wss://" + this.reportUrl); this.a.addEventListener("open", this.I); this.a.addEventListener("close", this.i) };
    f.send = function (a) { try { this.a && 1 === this.a.readyState ? this.a.send(JSON.stringify(a)) : this.b.length < this.H && (this.b.push(a), this.a || this.g()) } catch (b) { } }; f.close = function () { 1 >= this.c && (this.a.removeEventListener("close", this.i), this.a.close(), this.c--) }; f.L = function () { var a = this; this.c++; this.b.map(function (b) { a.send(b) }); this.b = [] }; f.K = function () { 0 < this.f && 0 < this.b.length && (setTimeout(this.g, 1E3), this.f--) }; function x(a, b, c, d, g) { void 0 === g && (g = document); this.f = b; this.c = c; this.g = d; this.b = g }
    x.prototype.a = function () { try { return null !== this.b.location.href.match(this.g) && Math.random() <= this.f ? this.c : null } catch (a) { } }; function y(a, b, c, d, g, e) { void 0 === e && (e = document); this.f = b; this.c = c; this.i = d; this.g = g; this.b = e } y.prototype.a = function () { try { if (-1 < this.b.cookie.indexOf("_CT_Log")) return this.c; if (Math.random() <= this.f) { if (this.i) { var a = this.g || 60, b = ""; if (a) { var c = new Date; c.setTime(c.getTime() + 6E4 * a); b = "; expires=" + c.toUTCString() } this.b.cookie = "_CT_Log=" + b + "; path=/;}" } return this.c } return null } catch (d) { } };
    function z(a, b, c, d) { this.f = b; this.c = c; this.b = d } z.prototype.a = function () { try { return "function" === typeof this.b && this.b() && Math.random() <= this.f ? this.c : null } catch (a) { } }; function A(a, b) { this.reportUrl = a; this.c = b; this.b = []; this.a = new XMLHttpRequest; this.a.onerror = this.a.ontimeout = this.a.onabort = function () { } }
    A.prototype.send = function (a) { var b = this; try { this.a.open("POST", "https://" + this.reportUrl), this.a.setRequestHeader("Content-Type", "application/json"), this.a.onreadystatechange = function () { 1 === b.a.readyState && b.b.map(function (a) { b.send(a) }) }, this.a && 1 === this.a.readyState ? this.a.send(JSON.stringify(a)) : this.b.length < this.c && this.b.push(a) } catch (c) { } }; A.prototype.close = function () { this.a = this.a.onabort = this.a.ontimeout = this.a.onerror = this.a.onload = this.a.onreadystatechange = null };
    function B(a, b, c) { var d = Number.MAX_VALUE; this.name = a; this.count = 1; this.minTime = d; this.totalTime = this.maxTime = this.avgTime = 0; this.fiveSecondRate = b; this.tenSecondRate = c } function C() { this.a = new t; this.b = {} } f = C.prototype; f.G = function (a) { var b = Date.now(); this.b[a] = b; var c = u(this.a, a); c && c.count ? (c.count++, D(c.fiveSecondRate, b, 5E3), D(c.tenSecondRate, b, 1E4)) : (b = Date.now(), this.a[a.toString()] = new B(a, new r(Number.MAX_VALUE, 1, 1, 1, b, 1, 1), new r(Number.MAX_VALUE, 1, 1, 1, b, 1, 1))) };
    f.F = function (a) { var b = u(this.a, a); if (b && this.b[a]) { a = Date.now() - this.b[a]; var c = b.minTime, d = b.maxTime; b.totalTime += a; b.avgTime = E(b.totalTime / b.count); b.minTime = Math.min(c, a); b.maxTime = Math.max(d, a) } }; f.C = function (a) { delete this.a[a.toString()] }; f.B = function () { v(this.a) }; f.D = function (a) { return u(this.a, a) }; function E(a) { var b = Math.pow(10, 3); return Math.round(a * b) / b }
    function D(a, b, c) { Math.floor(a.b / c) === Math.floor(b / c) ? a.count++ : (a.c++, a.a += a.count, a.max = Math.max(a.max, a.count), a.f = E(a.a / a.c), a.min = Math.min(a.min, a.count), a.count = 1, a.b = Date.now()) } function F() { this.a = {}; this.b = {}; this.config = {} } F.prototype.g = function (a, b) { this.config[a] = b };
    F.prototype.f = function (a) {
        var b = this.config[a], c = b && b.samplingRules; if (!c) return this.c(); var d = b.messageBufferSize || 50, g = b.connectionRetries || 10, d = 2 === b.transportMethod && "function" === typeof WebSocket ? this.b.ws ? this.b.ws : this.b.ws = new w(b.reportUrl, d, g) : this.b.xhr ? this.b.xhr : this.b.xhr = new A(b.reportUrl, d), e; a: { try { for (g = 0; g < c.length; g++) { var l = c[g].a(); if (null !== l) { e = l; break a } } e = null; break a } catch (p) { } e = void 0 } c = e; if (!c) return this.c(); if (this.a[a]) return this.a[a]; this.a[a] = new k(d, a, c, b.maxTotalSentMessages ||
            50, b.maxUniqueMessages, b.b || 1E3, b.messageIdsObject && b.messageIdsObject[a], b.subModulesObject && b.subModulesObject[a]); 3 === a && this.a[1] && (delete this.a[1].context.l, this.a[a].j(this.a[1].context), this.a[1].context.l = 1); return this.a[a]
    }; F.prototype.c = function () { return { close: function () { }, addToContext: function () { }, debug: function () { }, info: function () { }, warn: function () { }, error: function () { }, jsError: function () { }, metric: function () { }, context: {} } }; h.ptc = 4; h.monitor = 2; h.recorder = 1; h.changeMonitor = 3;
    k.prototype.info = k.prototype.u; k.prototype.warn = k.prototype.A; k.prototype.close = k.prototype.close; k.prototype.debug = k.prototype.m; k.prototype.error = k.prototype.o; k.prototype.metric = k.prototype.w; k.prototype.jsError = k.prototype.v; k.prototype.context = k.prototype.context; x.prototype.sample = x.prototype.a; k.prototype.getContext = k.prototype.s; k.prototype.addToContext = k.prototype.j; F.prototype.createLogger = F.prototype.f; C.prototype.timeEnd = C.prototype.F; F.prototype.getLoggerStub = F.prototype.c;
    y.prototype.sample = y.prototype.a; z.prototype.sample = z.prototype.a; C.prototype.timeStart = C.prototype.G; C.prototype.getMetric = C.prototype.D; F.prototype.addModuleConfig = F.prototype.g; C.prototype.clearMetric = C.prototype.C; C.prototype.clearAllMetrics = C.prototype.B; var G = "object" === typeof module && "object" === typeof module.exports, H = (G ? module.exports.ClickTaleClientLogger : window.ClickTaleClientLogger) || {}; H.Rate = r; H.ClientLogger = k; H.ClientModule = h; H.LoggerFactory = F; H.URLSamplingRule = x;
    H.PerformanceMetrics = C; H.PageViewSamplingRule = y; H.CallBackSamplingRule = z; G ? module.exports = H : window.ClickTaleClientLogger = H;
}();*/

//------------End CT Client Logger

window.ClickTaleSettings = window.ClickTaleSettings || {};
//PII Masking Inside of playback url
ClickTaleSettings.LocRefRew = function (url) {
    if (url) {
        var maskInUrlAfter = /(?:appretrieve|dashboard|summary|positions|balances|activity|Feature)/g;
        var foundPosition = url.search(maskInUrlAfter);
        var lastStringValue = "";
        var tempLastString = "";
        if (foundPosition !== -1) {
            lastStringValue = url.substring(foundPosition, url.length);
            tempLastString = lastStringValue.substring(0, lastStringValue.search("#"));
            if (!tempLastString && maskInUrlAfter.test(lastStringValue)) {
                tempLastString = lastStringValue.substring(0, maskInUrlAfter.lastIndex);
            }
            url = url.substring(0, foundPosition) + tempLastString;
        } else if (url.indexOf("/calculators-tools/ira-contribution-calculator") > -1 && url.indexOf("__Your-Results") == -1) {
            url += "?__Calculator";
        }
    }
    return url;
};


ClickTaleSettings.LocationRewriter = ClickTaleSettings.LocRefRew;
ClickTaleSettings.ReferrerRewriter = ClickTaleSettings.LocRefRew;

ClickTaleSettings.PTC = ClickTaleSettings.PTC || {};
ClickTaleSettings.Compression = ClickTaleSettings.Compression || {};

ClickTaleSettings.Compression.Method = function () {
    return "deflate";
};
ClickTaleSettings.Transport = ClickTaleSettings.Transport || {};
(function () {
    var Tr = ClickTaleSettings.Transport;
    Tr.Legacy = false;
    Tr.MaxConcurrentRequests = 5;
    Tr.BigBuffer = 120000;
})();
ClickTaleSettings.Protocol = ClickTaleSettings.Protocol || {};
ClickTaleSettings.Protocol.Method = "ImpactRecorder";
if (window.Zone && typeof Zone["__symbol__"] === "function") {
    ClickTaleSettings.PTC.restoreZonedXHR = function (xhr) {
        if (xhr) {
            var prot = Object.getPrototypeOf(xhr);
            while (prot) {
                for (var propName in prot) {
                    var replacement;
                    if ((replacement = prot[Zone["__symbol__"](propName)])) {
                        xhr[propName] = replacement;
                    }
                }
                prot = Object.getPrototypeOf(prot);
            }
        }
    };

    window.ClickTaleOnXHRCreated = function (xhr) {
        ClickTaleSettings.PTC.restoreZonedXHR(xhr);
    };
}

window.ClickTaleUIDCookieName = "WRUIDAWS";

function deleteIrrelevantUIDCookies(relevant) {
    var cookieArray = document.cookie.replace(/\s+/g, "").split(";");
    var hostArray = location.host.split(".");
    var topDom = hostArray.length <= 2 ? location.host : hostArray.slice(1).join(".");
    for (var i = 0; i < cookieArray.length; i++) {
        var currentCookie = cookieArray[i];
        var cookieKey = currentCookie.substring(0, currentCookie.indexOf("="));
        if (cookieKey.indexOf("WRUID") > -1 && relevant.indexOf(cookieKey) == -1) {
            document.cookie = cookieKey + "='';domain=." + topDom + ";path=/;expires=Thu, 01-Jan-1970 00:00:01 GMT;";
            document.cookie = cookieKey + "='';path=/;expires=Thu, 01-Jan-1970 00:00:01 GMT;";
        }
    }
}
deleteIrrelevantUIDCookies([window.ClickTaleUIDCookieName]);
window.ClickTaleSettings.PTC.UseTransport = true;

if (document.readyState === "complete") {
    window.ClickTaleIncludedOnWindowLoad = true;
}
ClickTaleSettings.PTC.isSmall = false;
window.ClickTaleIncludedOnDOMReady = true;
window.ClickTaleSettings.PTC.EnableChangeMonitor = false;
window.ClickTaleSettings.PTC.UploadPageHappened = false;
window.ClickTaleSettings.PTC.IsMobile = false;

ClickTaleSettings.CheckAgentSupport = function (f, v) {
    if (v.t == v.ED) {
        ClickTaleSettings.Compression.Async = false;
    }
    if (v.m) {
        ClickTaleSettings.PTC.IsMobile = true;
    }
    if (v.t == v.IE && v.v <= 11) {
        ClickTaleSettings.PTC.isSmall = true;
    }

    if ((v.t == v.IE && v.v <= 9) || (/oltx.fidelity.com\/ftgw\/fbc\/oftop\/portfolio/i.test(location.href) && v.t == v.IE && v.v <= 11)) {
        window.ClickTaleSettings.PTC.okToRunPCC = false;
        return false;
    } else {
        if (!(v.t == v.IE && v.v <= 10)) {
            window.ClickTaleSettings.PTC.EnableChangeMonitor = true;
            window.ClickTaleSettings.PTC.ConfigChangeMonitor();
        }
        var fv = f(v);
        window.ClickTaleSettings.PTC.okToRunPCC = fv;
        return fv;
    }
};

ClickTaleSettings.PTC.startsWith = function (strToTest, str) {
    return strToTest.lastIndexOf(str, 0) === 0;
};

ClickTaleSettings.DOM = ClickTaleSettings.DOM || {};

(function () {
    var selectorForBoth = "selector";
    

    // /**
    //  *
    //  * @param {!string} value - attribute value || textContent
    //  * @param {!Node} node
    //  * @param {!string} rule - css selector
    //  * @param {!number} type - 0 - text, 1 - attribute
    //  * @returns {!string}
    //  */
    // function transform(value, node, rule, type) {
    //     var reg = /\w|[^\x00-\x7F]/g;
    //     return value.replace(reg, "-");
    // }

    ClickTaleSettings.DOM.PII = {
        Text: [selectorForBoth],
        Attributes: [
            {
                rule: selectorForBoth,
                attr: "value",
            },
        ], //,
        //Transform: transform
    };

    ClickTaleSettings.DOM.PII = ClickTaleSettings.DOM.PII || {};
    ClickTaleSettings.DOM.PII.UseAutoMasking = true; // required for AAA masking default value is false
    ClickTaleSettings.DOM.PII.MaskingChar = "A"; // optional default value is "A"

    /**
     *
     * @param {!CSSStyleSheet} adoptedStyleSheets
     */
    function getSerializedNode(adoptedStyleSheets) {
        var textArray = [];
        adoptedStyleSheets.forEach(function (sheet) {
            var rules = /** @type{!CSSRuleList} */ (sheet.cssRules);
            for (var i = 0; i < rules.length; i++) {
                var rule = rules[i];
                if (rule && rule.cssText) {
                    textArray.push(rule.cssText);
                }
            }
        });
        if (textArray.length) {
            return {
                nodeType: 1,
                tagName: "style",
                attributes: {
                    "data-addoptedCSS": "true",
                },
                childNodes: [
                    {
                        nodeType: 3,
                        textContent: textArray.join("\r\n"),
                    },
                ],
            };
        }
        return null;
    }

    /**
     *
     * @param {!(DocumentOrShadowRoot|Element)} root
     */
    function addSerializedNode(root, serializeAPI) {
        var serializeNode,
            parentNode = root,
            adoptedStyleSheets;
        switch (root.nodeType) {
            case 11:
                if ((adoptedStyleSheets = /** @type{!CSSStyleSheet} */ (root.adoptedStyleSheets)) && adoptedStyleSheets.length) {
                    serializeNode = getSerializedNode(adoptedStyleSheets);
                }
                break;
            case 1:
                if (typeof root.getRootNode === "function") {
                    root = root.getRootNode();
                    addSerializedNode(root, serializeAPI);
                }
                break;
            case 9:
                if ((adoptedStyleSheets = /** @type{!CSSStyleSheet} */ (root.adoptedStyleSheets)) && adoptedStyleSheets.length) {
                    serializeNode = getSerializedNode(adoptedStyleSheets);
                    parentNode = document.head || document.documentElement;
                }
                break;
        }
        if (serializeNode && parentNode) {
            serializeAPI.addChild(parentNode, null, serializeNode);
        }
    }

    ClickTaleSettings.DOM.Serializer = ClickTaleSettings.DOM.Serializer || {};

    ClickTaleSettings.DOM.Serializer.OnAfterSerialize = function (serializeAPI) {
        var allObservableRoots;
        if ("adoptedStyleSheets" in Document.prototype && window.ClickTaleGlobal && ClickTaleGlobal.symbols && ClickTaleGlobal.symbols.rootsManager && typeof ClickTaleGlobal.symbols.rootsManager.getAllObservableRoots === "function" && Array.isArray((allObservableRoots = /** @type{!Array.<DocumentOrShadowRoot|Element>} */ (ClickTaleGlobal.symbols.rootsManager.getAllObservableRoots())))) {
            allObservableRoots.forEach(function (root) {
                addSerializedNode(root, serializeAPI);
            });
        }
    };

    var locationRules = [
        // {
        //     selector: 'selector',
        //     Attributes: ['value'],
        //     Text: true,
        //     location: {
        //         prop: 'pathname',
        //         search: /account/i
        //     }
        // }
    //     {
    //         // FDLTY-83 Authorized Access page
    //         selector: "td.DataTableTitle",
    //         Attributes: [],
    //         Text: true,
    //         location: {
    //             prop: "pathname",
    //             search: /ftgw\/authaccess\/authapp\/authAccess/i,
    //         },
    //     },
    //     {
    //         // FDLTY-84 PGC
    //         selector: PGCSelector,
    //         Attributes: [],
    //         Text: true,
    //         location: {
    //             prop: "pathname",
    //             search: /ftgw\/tools\/customer\/navBasicIncomeProjections.go/i,
    //         },
    //     },
    //     {
    //         // FDLTY-129
    //         selector: "#qt-account option, .singleAccountName",
    //         Attributes: [],
    //         Text: true,
    //         location: {
    //             prop: "hostname",
    //             search: /fidelity.com/i,
    //         },
    //     },
    //     {
    //         // FDLTY-129
    //         selector: "#qt-account option",
    //         Attributes: ["value"],
    //         Text: false,
    //         location: {
    //             prop: "hostname",
    //             search: /fidelity.com/i,
    //         },
    //     },
    //     {
    //         // FDLTY-129
    //         selector: "#full-Name, #email-address",
    //         Attributes: ["value"],
    //         Text: false,
    //         location: {
    //             prop: "pathname",
    //             search: /RFI\/signup\/ATPeNews/i,
    //         },
    //     },
    //     {
    //         // FDLTY-162
    //         selector: "[data-pii='true'], [data-pii='yes'], .pii, [data-pii='true'] option, [name=\"listName\"] option",
    //         Attributes: [],
    //         Text: true,
    //         location: {
    //             prop: "hostname",
    //             search: /fidelity.com/i,
    //         },
    //     },
    //     {
    //         // FDLTY-162
    //         selector: "[data-pii='true'] option",
    //         Attributes: ["label"],
    //         Text: false,
    //         location: {
    //             prop: "hostname",
    //             search: /fidelity.com/i,
    //         },
    //     },
    ];

    locationRules.forEach(function (rule) {
        if (rule.location) {
            var prop = rule.location.prop;
            var search = rule.location.search;
            if (search.test(location[prop])) {
                var Attributes = rule.Attributes;
                var selector = rule.selector;
                var Text = rule.Text;
                var PII = ClickTaleSettings.DOM.PII;
                if (Text) {
                    PII.Text.push(selector);
                }
                if (Array.isArray(Attributes)) {
                    Attributes.forEach(function (attr) {
                        PII.Attributes.push({
                            rule: selector,
                            attr: attr,
                        });
                    });
                }
            }
        }
    });
})();

(function () {
    if (typeof window.ClickTalePIISelector === "string" && ClickTalePIISelector != "") {
        try {
            var domNodes = document.querySelector(ClickTalePIISelector);
            var PII = ClickTaleSettings.DOM.PII;
            PII.Text.push(ClickTalePIISelector);
            PII.Attributes.push({
                rule: ClickTalePIISelector,
                attr: "value",
            });
        } catch (err) {
            if (typeof ClickTaleNote === "function") {
                ClickTaleNote("Bad PII selector: " + encodeURIComponent(ClickTalePIISelector));
            }
        }
    }
})();

ClickTaleSettings.PTC.AssetManager = {
    isActive: false,
    isNeedForImg: false,
    subscriberId: "",
    pid: "",
    storageUrl: "https://s3.amazonaws.com/nv-p1-s3-assets-01/",
    prefixSpecialCharacters: false,
    getPrefixUrl: function () {
        return this.storageUrl + this.subscriberId + "/" + this.pid;
    },
    getFullURL: function (type, url) {
        var AMUrl = "";
        if (url) {
            switch (type) {
                case "css":
                    AMUrl = this.getPrefixUrl() + "/CSS/" + url.replace(/:\/\//g, "/").replace(/%20/g, " ");
                    if (this.prefixSpecialCharacters && this.prefixSpecialCharacters.test(AMUrl)) {
                        AMUrl = AMUrl.replace(/\?/g, "%253F").replace(/\&/g, "%26").replace(/\=/g, "%3D");
                    } else {
                        AMUrl = AMUrl.replace(/\?.*/g, "");
                    }
                    break;
                case "image":
                    AMUrl = this.getPrefixUrl() + "/IMAGE/" + url.replace(/:\/\//g, "/").replace(/%20/g, " ");
                    break;
            }
        }
        return !!AMUrl ? AMUrl : false;
    },
    init: function () {
        if (this.isActive && this.pid && this.subscriberId) {
            var transform = (ClickTaleSettings.DOM.Transform = ClickTaleSettings.DOM.Transform || []);
            transform.push({
                rule: 'link[href][rel*="stylesheet"]',
                attr: "href",
                transform: function (value, node) {
                    if (value.indexOf("fonts.googleapis.com") == -1) {
                        return ClickTaleSettings.PTC.AssetManager.getFullURL("css", node.href);
                    }
                    return value;
                },
            });
            if (this.isNeedForImg) {
                transform.push({
                    rule: "img[src]",
                    attr: "src",
                    transform: function (value, node) {
                        return ClickTaleSettings.PTC.AssetManager.getFullURL("img", node.src);
                    },
                });
            }
        }
    },
};
ClickTaleSettings.PTC.AssetManager.init();

ClickTaleSettings.PTC.ConfigChangeMonitor = function () {
    var excludeBothArray = ['.ctExcludeCM, img[src^="data"], rmd-table tbody, ' + (location.href == "https://dpcs.fidelity.com/prgw/dpcs/dma/" ? ":not(.highcharts-container)>svg" : "svg")];

    if (/dpcs\/dma/i.test(window.location.pathname)) {
        excludeBothArray.push(".projections--container");
    }

    if (/brokerage.fidelity.com\/ftgw\/brkg\/watchlist/i.test(window.location.href)) {
        excludeBothArray.push(".market-monitor");
    }

    ClickTaleSettings.ChangeMonitor = {
        Enable: ClickTaleSettings.PTC.EnableChangeMonitor,
        // Roots: [document.body],
        Exclude: {
            ChildNodes: [],
            Attributes: [],
        },
    };

    var exclude = ClickTaleSettings.ChangeMonitor.Exclude;
    if (excludeBothArray.length > 0) {
        Array.prototype.push.apply(exclude.ChildNodes, excludeBothArray);
        Array.prototype.push.apply(exclude.Attributes, excludeBothArray);
    }

    function insertIntoBoth(selector) {
        exclude.ChildNodes.push(selector);
        exclude.Attributes.push(selector);
    }

    // if (document.location.pathname === '/') {
    //     insertIntoBoth("selector");
    // }

    if (typeof window.ClickTaleCMSelector === "string" && window.ClickTaleCMSelector != "") {
        try {
            var domNodes = document.querySelector(ClickTaleCMSelector);
            insertIntoBoth(ClickTaleCMSelector);
        } catch (err) {
            if (typeof ClickTaleNote === "function") {
                ClickTaleNote("Bad CM selector: " + encodeURIComponent(ClickTalePIISelector));
            }
        }
    }
};

ClickTaleSettings.PTC.doOnlyWhen = function (toDoHandler, toCheckHandler, interval, times, failHandler) {
    if (!toDoHandler || !toCheckHandler) return;
    if (typeof interval == "undefined") interval = 1000;
    if (typeof times == "undefined") times = 20;
    if (--times < 0) {
        if (typeof failHandler === "function") {
            failHandler();
        }
        return;
    }
    if (toCheckHandler()) {
        toDoHandler();
        return;
    }
    setTimeout(function () {
        ClickTaleSettings.PTC.doOnlyWhen(toDoHandler, toCheckHandler, interval, times, failHandler);
    }, interval);
};

// window.ClickTaleSettings.Performance = {
//     Thresholds: {
//         RecorderStartToUploadStart: 180,
//         Compression: 180,
//         ClickTaleStop: 180,
//         UploadPage: 180,
//         OnBeforeRewrite: 180,
//         ResetRecorderState: 180,
//         ClearDOMState: 180,
//         Events: 180,
//         AggregateAndFlush: 180,
//         MutationSummary: 180,
//         MutationStartToRecorder: 180,
//         ChildListMutation: 300,
//         AttributesMutation: 300,
//         CharacterDataMutation: 300,
//         CMRewriteRulesAttributes: 180,
//         CMRewriteRulesText: 180,
//     },
// };

//------------------- CT Client Logger Config
/*!function () {
    if (typeof ClickTaleClientLogger === "object") {
        var samplingRules = createLoggerRules();
        var loggerReportUrl = "cts-us.clicktale.net/log";

        function createLoggerRules() {
            var pvRule = new ClickTaleClientLogger.PageViewSamplingRule(3, 0.01, 1, true, 60);
            return [pvRule];
        }
        var config = {
            reportUrl: loggerReportUrl,
            connectionRetries: 10,
            maxMessageSize: 1000,
            transportMethod: 2,
            messageBufferSize: 100,
            maxUniqueMessages: 5,
            maxTotalSentMessages: 50,
            samplingRules: samplingRules
        }
        var loggerFactory = new ClickTaleClientLogger.LoggerFactory();
        loggerFactory.addModuleConfig(ClickTaleClientLogger.ClientModule.recorder, config);
        loggerFactory.addModuleConfig(ClickTaleClientLogger.ClientModule.changeMonitor, config);
    } else {
        var loggerFactory = null;
    }
    window.ClickTaleGlobal = window.ClickTaleGlobal || {};
    window.ClickTaleGlobal.logger = loggerFactory;
}();*/
//------------------- End CT Client Logger Config

function ClickTaleOnRecording() {
    (function () {
        function init() {
            var uxaGet = _uxa.push(["getSessionData"]);
            if (uxaGet && uxaGet.projectId) {
                var checkIfCSisRecording = _uxa.push(["isRecording"]);
                var playerType = "";
                if (checkIfCSisRecording) {
                    playerType = "&recordingType=cs";
                }
                var pid = uxaGet.projectId;
                var uu = uxaGet.userId;
                var sn = uxaGet.sessionNumber;
                var pvid = uxaGet.pageNumber;
                if (pid && uu && sn && pvid) {
                    var intLink = "https://app.contentsquare.com/quick-playback/index.html?pid=" + pid + "&uu=" + uu + "&sn=" + sn + "&pvid=" + pvid + playerType + "&vd=csrl";
                    window.ClicktaleReplayLink = function () {
                        return intLink;
                    };
                    if (window.CS_CONF) {
                        CS_CONF.replaylink = intLink;
                    }
                }
            }
        }
        function callback(context) {
            if (!disableCallback) {
                disableCallback = true;
                init(context);
            }
        }
        var disableCallback = false;
        window._uxa = window._uxa || [];
        _uxa.push(["afterPageView", callback]);
    })();
}

// End of user-defined pre WR code


var isHttps = document.location.protocol == 'https:',
	scriptSource = window.ClickTaleScriptSource,
	pccSource = scriptSource;

if (!scriptSource) {
	window.ClickTaleScriptSource = isHttps ? 'https://cdnssl.clicktale.net/www/' : 'http://cdn.clicktale.net/www/';
}


if(!ClickTaleGlobal.init.pccRequested) {
		var pccSrc = pccSource ? pccSource : (isHttps ? 'https://cdnssl.clicktale.net/pcc/' : 'http://cdn.clicktale.net/pcc/');
	    pccSrc += 'e802b0fb-4da3-4648-a335-e31c353417bf.js?DeploymentConfigName=Malka_20220517&Version=1';
			var pccScriptElement = ClickTaleCreateDOMElement('script');
	pccScriptElement.type = "text/javascript";
	pccScriptElement.crossOrigin = "anonymous";
		pccScriptElement.async = true;
		if(ClickTaleGlobal.scripts.sri && ClickTaleGlobal.scripts.sri.hashes){
        pccScriptElement.integrity = ClickTaleGlobal.scripts.sri.hashes.pcc;
        pccScriptElement.src = ClickTaleGlobal.scripts.sri.path + "pcc.js";
	}else {
       pccScriptElement.src = pccSrc;
    }
	
	ClickTaleGlobal.init.isAllowed && document.body.appendChild(pccScriptElement);
		ClickTaleGlobal.init.pccRequested = true;
}
	
window.ClickTalePrevOnReady = typeof window.ClickTaleOnReady == 'function' ? window.ClickTaleOnReady : void 0;

window.ClickTaleOnReady = function() {
	var PID=178, 
		Ratio=1, 
		PartitionPrefix="www43",
		SubsId=232942;
	
	if (window.navigator && window.navigator.loadPurpose === "preview") {
       return;
	};
		
	
	// Start of user-defined header code (PreInitialize)
	window._uxa = window._uxa || [];
window.ClickTaleSettings = window.ClickTaleSettings || {};
window.ClickTaleSettings.PTC = window.ClickTaleSettings.PTC || {};
//blocked URL's


// if ((document.location.href.toLowerCase().indexOf('/ftgw/toa/transfer/toatracker') > -1) ||
// (/accountopening.fidelity.com/i.test(location.host) && !/\/ftgw\/aong\/aongapp\/(529|mobile\/|common\/|rep\/)/i.test(document.location.pathname)) ||
// (window.location.href.indexOf("https://toa.fidelity.com/ftgw/toa/transfer/toaTracker") > -1)) {
// return;
// }
if (document.location.href.indexOf("https://oltx.fidelity.com") > -1) {
	return;
}

// var Blocked_URL_Map = new Object();
// Blocked_URL_Map["myguidancertp.fidelity.com"] = false;
// Blocked_URL_Map["/ftgw/toa/transfer/ero/trackerSelect"] = false;
// Blocked_URL_Map["/ftgw/toa/transfer/ero/tracker"] = false;
// Blocked_URL_Map["toa.fidelity.com"] = false;
// Blocked_URL_Map["fixedincomexq2web.fidelity.com/ftgw/fi/FILanding#tbindividual-bonds|treasury"] = false;

// for (var URL_Key in Blocked_URL_Map) {
// if (document.location.href.toLowerCase().indexOf(URL_Key.toLowerCase()) > -1 && document.location.href.toLowerCase().indexOf("toa.fidelity.com/ftgw/toa/transfer/ero/initiator") == -1 /*Whitelist*/) {
// return;
// }
// }


var pathToSend = checkURL(document.location.pathname);
var queryToSend = checkURL(document.location.search);

!!pathToSend && window._uxa.push(['setPath', pathToSend]);
!!queryToSend && window._uxa.push(['setQuery', queryToSend]);

function checkURL(url) {
	if (url) {
		var maskInUrlAfter = /(?:appretrieve|dashboard|summary|positions|balances|activity|Feature)/g;
		var foundPosition = url.search(maskInUrlAfter);
		var lastStringValue = "";
		var tempLastString = "";
		if (foundPosition !== -1) {
			lastStringValue = url.substring(foundPosition, url.length);
			tempLastString = lastStringValue.substring(0, lastStringValue.search("#"));
			if (!tempLastString && maskInUrlAfter.test(lastStringValue)) {
				tempLastString = lastStringValue.substring(0, maskInUrlAfter.lastIndex);
			}
			url = url.substring(0, foundPosition) + tempLastString;
		} else if (url.indexOf("/calculators-tools/ira-contribution-calculator") > -1 && url.indexOf("__Your-Results") == -1) {
			url += "?__Calculator";
		}
	}
	return url;
}

//variables
window.ClickTaleSettings.PTC.CustomVariables = window.ClickTaleSettings.PTC.CustomVariables || [];
window.ClickTaleSettings.PTC.CustomVariables = [{
		displayName: 'Page Name',
		key: 'pageName',
		slot: 1
	}, {
		displayName: 'Purpose',
		key: 'PURPOSE',
		slot: 2
	}, {
		displayName: 'Page',
		key: 'PAGE',
		slot: 3
	}
];
window.ClickTaleSettings.PTC.InitFuncs = window.ClickTaleSettings.PTC.InitFuncs || [];
window.ClickTaleSettings.PTC.InitFuncs.push(function () {
	var pcc = document.querySelector('script[src*="clicktale"][src*="pcc"], script[src*="contentsquare"][src*="pcc"]');
	if (pcc) {
		var versionmatch = pcc.src.match(/DeploymentConfigName=(.+)/i);
		if (versionmatch && typeof ClickTaleExec === 'function') {
			ClickTaleExec("console.info('" + versionmatch[0] + "');");
			ClickTaleEvent("Config: " + versionmatch[1].replace(/\&.+/, ''));
		}
	}
});
var initFuncs = window.ClickTaleSettings.PTC.InitFuncs;
//functions
function sendCVar() {
	var cVars = window.ClickTaleSettings.PTC.CustomVariables;
	var metaPurpose = document.querySelector('meta[name="' + cVars[1].key + '"]');
	var metaPage = document.querySelector('meta[name="' + cVars[2].key + '"]');
	if (!metaPurpose && !metaPage) {
		//then send the pageName
		var sPageName = !!window['s'] && window['s'].pageName;
		if (!!sPageName) {
			window._uxa.push(['setCustomVariable', cVars[0].slot, cVars[0].displayName, sPageName, 3]);
		}
	} else {
		if (!!metaPurpose) {
			var contentPurpose = metaPurpose.content;
			if (!!contentPurpose) {
				window._uxa.push(['setCustomVariable', cVars[1].slot, cVars[1].displayName, contentPurpose, 3]);
			}
		}
		if (!!metaPage) {
			var contentPage = metaPage.content;
			if (!!contentPage) {
				window._uxa.push(['setCustomVariable', cVars[2].slot, cVars[2].displayName, contentPage, 3]);
			}
		}
	}
}

//IMP-4783
if (document.location.hostname.toLowerCase() === 'www.fidelity.com' && document.location.pathname === '/' && document.location.search.toLowerCase().indexOf('test=newphpvec') === -1) {
	var selector = document.querySelector("meta[name=PAGE]");
	if (!!selector && !!selector.getAttribute("content")) {

		if (selector.getAttribute("content") == "HomePageProspect") {
			if (!!window['phpVersion'] && window.phpVersion == "newphp") {
				window._uxa.push(['setQuery', document.location.search + '?test=newphpvec']);
			} else if (window.phpVersion != "newphp") {
				window._uxa.push(['setQuery', document.location.search + "__ClassicProspectHomepage"]);
			}
		} else if (selector.getAttribute("content") == "HomePage") {
			window._uxa.push(['setQuery', document.location.search + "__CustomerHomepage"]);
		}
	}
}

function startCT() {
	window.ClickTaleIncludedOnDOMReady = true;
	window._uxa = window._uxa || [];
	//My cVar function
	sendCVar();
	//My cVar function
	window._uxa.push(['startDataCollection']);
	ClickTaleGlobal.init.isAllowed && ClickTale(PID, Ratio, PartitionPrefix, SubsId);
	if ((typeof ClickTalePrevOnReady == 'function') && (ClickTaleOnReady.toString() != ClickTalePrevOnReady.toString())) {
		ClickTalePrevOnReady();
	}
}
//execution
if (window.location.href.indexOf('/calculators-tools/ira-contribution-calculator') > -1) {
	if (document.querySelector('.ira-calculator.show')) {
		window._uxa.push(['setPath', window.location.pathname + '?__Calculator']);
	}
}
if (location.pathname.indexOf('/pi/calculators/saving-for-retirement/') > -1) {
	function getSavingStep() {
		let question = document.querySelector('.question:not(.hidden)');
		if (question) {
			let id = question['id'];
			if (id) {
				return id.replace('row', '');
			}
		} else if (document.querySelector('body.results')) {
			return 'results';
		}
	}
	let savingStep = getSavingStep();
	if (savingStep) {
		window._uxa.push(['setPath', `${window.location.pathname}?__${savingStep}`]);
	}
}

if (location.pathname.indexOf('/pi/retirement-score/') > -1) {
	if (!!document.querySelector('.question label')) {
		window._uxa.push(['setPath', window.location.pathname + '?__Step_1']);
	}
}

if (typeof ClickTaleSetAllSensitive === "function") {
	ClickTaleSetAllSensitive();
}

ClickTaleUploadPage();
window.ClickTaleSettings.PTC.UploadPageHappened = true;

for (var i = 0, initLen = initFuncs.length; i < initLen; i++) {
	if (typeof initFuncs[i] === 'function') {
		initFuncs[i]();
	}
}
//Start: IMP-1594
setTimeout(startCT, 1000);
//Need this for early return
return;
// End: IMP-1594

	// End of user-defined header code (PreInitialize)
    
	
	window.ClickTaleIncludedOnDOMReady=true;
	
	ClickTaleGlobal.init.isAllowed && ClickTale(PID, Ratio, PartitionPrefix, SubsId);
	
	if((typeof ClickTalePrevOnReady == 'function') && (ClickTaleOnReady.toString() != ClickTalePrevOnReady.toString()))
	{
    	ClickTalePrevOnReady();
	}
	
	
	// Start of user-defined footer code
	
	// End of user-defined footer code
	
}; 
(function() {
	var div = ClickTaleCreateDOMElement("div");
	div.id = "ClickTaleDiv";
	div.style.display = "none";
	document.body.appendChild(div);

	
		var wrScript = ClickTaleCreateDOMElement("script");
	wrScript.crossOrigin = "anonymous";
	wrScript.type = 'text/javascript';
		wrScript.async = true;
		if(ClickTaleGlobal.scripts.sri && ClickTaleGlobal.scripts.sri.hashes){
        wrScript.integrity = ClickTaleGlobal.scripts.sri.hashes.wr;
        wrScript.src = ClickTaleGlobal.scripts.sri.path + "wr.js";
	}else {
        wrScript.src = window.ClickTaleScriptSource + 'bridge-WR110.js';
    }

	ClickTaleGlobal.init.isAllowed && document.body.appendChild(wrScript);
})();







var ctVEconfig={VE_BASE_URL:"https://ve-cec-na1.app.clicktale.com/",VE_PROXY_BASE_URL:"https://vep-cec-na1.app.clicktale.com/"};!function(){try{var e=window.chrome,t=window.navigator&&window.navigator.vendor;null!=e&&"Google Inc."===t&&window.addEventListener&&addEventListener("message",o,!1);var n=window.location.search.substring(window.location.search.indexOf("ctAdvancedSearch=")).split("&")[0].split("=");"ctAdvancedSearch"==n[0]&&"true"==n[1]&&c("ctAdvancedSearchModule",ctVEconfig.VE_BASE_URL+"client/dist/advancedSearchModule.js")}catch(e){}function o(e){var t;try{t=JSON.parse(e.data)}catch(e){return}!1!==new RegExp("(app[.]clicktale[.]com)($|:)").test(e.origin)&&(window.ct_ve_parent_window=e.source,"CT_testRules"==t.name&&(sessionStorage.setItem("CT_testRules",!0),console.log((new Date).toJSON(),"PostPTC: testRules ",sessionStorage.getItem("CT_testRules")),window.ct_ve_parent_window.postMessage({name:"testRulesRecieved",params:{}},"*")),"CTload_ve"===t.function&&"function"==typeof ClickTaleGetPID&&null!==ClickTaleGetPID()&&(function(){console.log((new Date).toJSON(),"PostPTC: start loading test rules");var e=ClickTaleGetPID();c("ctTestRulesModule",ctVEconfig.VE_BASE_URL+"rulesEngineContent/TestPCC/"+e,function(){sessionStorage.setItem("CT_testRules_Loaded",!0),console.log((new Date).toJSON(),"PostPTC: test rules loaded")})}(),c("ctVisualEditorClientModule",ctVEconfig.VE_BASE_URL+"client/dist/veClientModule.js")))}function c(e,t,n){var o,c=(o="script",document.createElementNS?document.createElementNS("http://www.w3.org/1999/xhtml",o):document.createElement(o));c.setAttribute("type","text/javascript"),c.setAttribute("id",e),c.src=t,void 0!==n&&(c.onload=n),document.getElementById(e)||document.body.appendChild(c)}}();

//Signature:jYPxNPvvnPrqZp6kJcdwMwCSe8l9mDYEZBwbmtPES35y5URa8hoGAV0yVTc4u3qcFUSt6bYSUtRyaTr2aiyUZfQ3WDksK/LoF0y5dCAAlEOY+zxIZx2hatUSW6QZ6VQ62Nf6vdb7ICaMV4X8TaamwmGwRlCP+5dBHhAqFawYgu0=